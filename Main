pip install pandas scikit-learn tensorflow numpy


import pandas as pd
from sklearn.model_selection import train_test_split
from sklearn.preprocessing import StandardScaler, OneHotEncoder
from sklearn.compose import ColumnTransformer
from sklearn.pipeline import Pipeline
import numpy as np
data = pd.read_csv('BankRecords.csv')
print(data.isnull().sum())
categorical_columns = ['Education', 'Personal Loan', 'Securities Account', 'CD Account', 'Online Banking', 'CreditCard']
numerical_columns = ['Age', 'Experience(Years)', 'Family', 'Credit Score', 'Mortgage(Thousands\'s)']
preprocessor = ColumnTransformer(
    transformers=[
        ('num', StandardScaler(), numerical_columns),
        ('cat', OneHotEncoder(), categorical_columns)])
X = data.drop('Income(Thousands\'s)', axis=1)
y = data['Income(Thousands\'s)']
X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.2, random_state=35)
X_train = preprocessor.fit_transform(X_train)
X_test = preprocessor.transform(X_test)



import tensorflow as tf
from tensorflow.keras.models import Sequential
from tensorflow.keras.layers import Dense, Input
def create_model():
    model = Sequential()
    model.add(Input(shape=(X_train.shape[1],)))
    model.add(Dense(64, activation='relu'))
    model.add(Dense(32, activation='relu'))
    model.add(Dense(1))
    model.compile(optimizer='adam', loss='mean_squared_error', metrics=['mae'])
    return model





import tensorflow as tf
from tensorflow.keras.models import Sequential
from tensorflow.keras.layers import Dense, Input
def create_model():
    model = Sequential()
    model.add(Input(shape=(X_train.shape[1],)))
    model.add(Dense(64, activation='relu'))
    model.add(Dense(32, activation='relu'))
    model.add(Dense(1))
    model.compile(optimizer='adam', loss='mean_squared_error', metrics=['mae'])
    return model
model = create_model()
model.summary()
history = model.fit(X_train, y_train, validation_split=0.2, epochs=100, batch_size=36, verbose=1)
loss, mae = model.evaluate(X_test, y_test, verbose=0)
print(f"Neural Network Mean Absolute Error is: {mae}")
model = create_model()
model.summary()
history = model.fit(X_train, y_train, validation_split=0.2, epochs=100, batch_size=36, verbose=1)
loss, mae = model.evaluate(X_test, y_test, verbose=0)
print(f"Neural Network Mean Absolute Error is: {mae}")




from sklearn.linear_model import LinearRegression
from sklearn.metrics import mean_absolute_error
regressor = LinearRegression()
regressor.fit(X_train, y_train)
y_pred = regressor.predict(X_test)
mae_regressor = mean_absolute_error(y_test, y_pred)
print(f"Linear Regression Mean Absolute Error is: {mae_regressor}")


new_customer_data = {
    'Age': 47,
    'Experience(Years)': 3,
    'Sort Code': 96754,
    'Family': 3,
    'Credit Score': 1.8,
    'Education': 'Degree',
    'Mortgage(Thousands\'s)': 80,
    'Personal Loan': 'No',
    'Securities Account': 'No',
    'CD Account': 'No',
    'Online Banking': 'Yes',
    'CreditCard': 'No'
}
new_customer_dataframe = pd.DataFrame([new_customer_data])
processed_new_customer_data = preprocessor.transform(new_customer_dataframe)
nn_predict = model.predict(processed_new_customer_data)
print(f"Neural Network predicted an income of: {nn_predict[0][0]}")
lr_predict = regressor.predict(processed_new_customer_data)
print(f"Linear Regression predicted an income of: {lr_predict[0]}")




pip install pandas numpy matplotlib seaborn wordcloud textblob



#data preparation 


import pandas as pd
import numpy as np
import re
import matplotlib.pyplot as plt
from wordcloud import WordCloud
from sklearn.model_selection import train_test_split
from sklearn.feature_extraction.text import CountVectorizer
from sklearn.linear_model import LogisticRegression
from sklearn.pipeline import Pipeline
from sklearn.metrics import accuracy_score, confusion_matrix, classification_report
data = pd.read_csv('tweets.csv', encoding='latin1')
data.head()
print(data.isnull().sum())
def preprocess_text(text):
    text = re.sub(r'http\S+', '', text)  
    text = re.sub(r'@\w+', '', text)
    text = re.sub(r'#\w+', '', text) 
    text = re.sub(r'RT\s+', '', text) 
    text = re.sub(r'\s+', ' ', text)  
    text = text.strip() 
    return text
data['clean_text'] = data['text'].apply(preprocess_text)


#Sentiment Analysis


from textblob import TextBlob
def get_sentiment(text):
    analysis = TextBlob(text)
    if analysis.sentiment.polarity > 0:
        return 'positive'
    elif analysis.sentiment.polarity == 0:
        return 'neutral'
    else:
        return 'negative'
data['sentiment'] = data['clean_text'].apply(get_sentiment)
print(data['sentiment'].value_counts())



#visualization


import seaborn as sns
plt.figure(figsize=(8,6))
sns.countplot(x='sentiment', hue='sentiment', data=data, palette='viridis', dodge=False, legend=False)
plt.title('Sentiment Distribution')
plt.xlabel('Sentiment')
plt.ylabel('Count')
plt.show()
positive_text = ' '.join(data[data['sentiment'] == 'positive']['clean_text'])
neutral_text = ' '.join(data[data['sentiment'] == 'neutral']['clean_text'])
negative_text = ' '.join(data[data['sentiment'] == 'negative']['clean_text'])
def plot_wordcloud(text, title):
    wordcloud = WordCloud(width=800, height=400, max_font_size=100, max_words=100, background_color='white').generate(text)
    plt.figure(figsize=(10,8))
    plt.imshow(wordcloud, interpolation='bilinear')
    plt.title(title)
    plt.axis('off')
    plt.show()
plot_wordcloud(positive_text, 'Positive Sentiment Word Cloud')
plot_wordcloud(neutral_text, 'Neutral Sentiment Word Cloud')
plot_wordcloud(negative_text, 'Negative Sentiment Word Cloud')
